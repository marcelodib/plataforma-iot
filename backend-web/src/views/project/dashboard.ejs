<%include ../common/header.ejs%>

<link rel="stylesheet" type="text/css" href="css/customForm.css">
<script src="/mqtt.js"></script>

<!-- CONTENT -->
<div class="container">

    <br><br>

    <div class="divCenterForm">
        <h3 id="pageTitle">Dashboard &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</h3>
        <br>
        <form class="form-inline" action="javascript:listProjectMeasure()" method="POST">
            
            <div class="row">
                <div class="col">
                    <!-- input  -->
                    <div class="form-group">
                        <label> Data de Inicio&nbsp;&nbsp;</label>
                        <input type="date" name="startDate" id="startDate" class="form-control" required>
                    </div>
                </div>
                <div class="col">
                    <!-- input  -->
                    <div class="form-group">
                        <label> Data de Fim&nbsp;&nbsp;</label>
                        <input type="date" name="endDate" id="endDate" class="form-control" required>
                    </div>
                </div>

                <div class="col">
                    <label>&nbsp;&nbsp;</label>
                    <button class="btn btn-primary btnLeft form-control" type="submit">Buscar</button>
                </div>
                
            </div>
        </form>

        <br>
        <div class="row">
            <div class="col">
                <button class="btn btn-warning text-white" type="button" id="liveBtn" style="width: 100%;" onclick="liveMode();">Live</button>
            </div>

            <div class="col">
                <button class="btn btn-primary text-white" type="button" style="width: 100%;" data-toggle="modal" data-target="#exampleModalCenter">Enviar Comando</button>
            </div>
        </div>

        <br>
        <br>
        <br>

        <h3 class="text-secondary">Últimas medidas</h3>
        <hr>

        <div class="row" id="rowCards"></div>

        <h3 class="text-secondary">Gráficos</h3>
        <hr>
        <div id="rowCharts"></div>

        <h3 class="text-secondary">Tabelas</h3>
        <hr>
        <div class="row" id="rowTables"></div>
        <hr>
    </div>

    <br><br>
    <!-- Modal Send Command-->
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title text-secondary" id="exampleModalLongTitle">Enviando Comando</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <form action="javascript:sendCommand()" method="POST">

                        <div class="form-group">
                            <label><i class="fas fa-key"></i> Chave</label>
                            <input type="text" placeholder="" name="key" id="key" class="form-control"
                                pattern="[A-Za-z0-9]{1,127}$" maxlength="32" required>
                        </div>

                        <div class="form-group">
                            <label><i class="fas fa-question"></i> Valor</label>
                            <input type="text" placeholder="" name="value" id="value" class="form-control"
                                pattern="[A-Za-zÀ-ú0-9.,\- ]{1,127}$" maxlength="127" required>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary" style="background-color: #33DDFF; border-color: #33DDFF;">Enviar</button>
                        </div>

                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- /CONTENT -->

<%include ../common/footer.ejs%>

<script defer src="js/amcharts/core.js"></script>

<script defer src="js/amcharts/charts.js"></script>

<script defer src="js/amcharts/themes/kelly.js"></script>

<script defer src="js/amcharts/themes/animated.js"></script>


<script>
    let idProject = 0;
    let token = "";
    let live = false;
/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável executar todas as rotinas iniciais|
     * |da página assim que ela é carregada.                 |
     * =======================================================
     */
    window.onload = () => { 
        /*Recuperação dos parâmetros enviados pela url.*/
        const urlParams = new URLSearchParams(window.location.search);
        const projectName = urlParams.get('projectName');
        idProject = urlParams.get('idProject');
        token = urlParams.get('token');

        /*Renderização do nome do projeto ao título.*/
        document.getElementById("pageTitle").innerHTML = projectName;
        /*Chamada da função que adiciona o titulo da side bar.*/
        setSideBarTitle("Dashboard", "fa-chart-line");

        /*Atribuição do dia atual como default dos inputs.*/
        document.getElementById('startDate').valueAsDate = new Date();
        document.getElementById('endDate').valueAsDate = new Date();
        
        am4core.ready(() => {
            listVariable(idProject);
        });
    };
    $(document).ready(function () {
        /*Chamada da função que ativa a side bar.*/
        $('#sidebarCollapse').on('click', function () {
            $('#sidebar').toggleClass('active');
        });
    });
/*============================================================================*/

/*============================================================================*/
    /**
     * ========================================================
     * |Função responsável por ativar o modo live, dessa forma|
     * |se inscrevendo no tópico para receber novas medidas.  |
     * ========================================================
     */
    function liveMode() {
        /*Variável que conterá a conexão com o broker mqtt.*/
        let client = false;
        /*Atribuição do modo live on/off*/
        live = !live;
        /*Verificação se o modo live esta ativo.*/
        if (live) {
            document.getElementById("liveBtn").innerHTML = "Stop Live"
            /*Chamada da função que abre conexão com o broker mqtt.*/
            client = mqtt.connect("ws://127.0.0.1:1883");

            /*Chamada da função que realiza a inscrição no tópico.*/
            client.subscribe(`post-data${token}`);

            /*Função que ficará ouvindo caso chegue uma mensagem no tópico.*/
            client.on("message", function(topic, payload) {
                console.log(topic);
                console.log(payload);
            });
        } else {
            document.getElementById("liveBtn").innerHTML = "Live"
            /*Verificação se existe conexão com o broker mqtt.*/
            if (client){
                /*Chamada da função que encerra a conexão com o broker mqtt.*/
                client.end();
            }
        }
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * ========================================================
     * |Função responsável por enviar um comando para o       |
     * |dispositivo do projeto.                               |
     * ========================================================
     */
    function sendCommand() {
        /*Chamada da função que abre conexão com o broker mqtt.*/
        const client = mqtt.connect("ws://127.0.0.1:1883");

        /*Verificação se a chave é válida.*/
        if (document.getElementById("key").value) {
            return alert("Chave do comando inválida!");
        }
        /*Verificação se o valor é válido.*/
        if (document.getElementById("value").value) {
            return alert("Valor do comando inválida!");
        }

        /*Atribuição do objeto com a chave e valor inserido.*/
        const command = {};
        command[document.getElementById("key").value] = document.getElementById("value").value;

        /*Chamada da função que realiza a publicação no tópico.*/
        client.publish(`send-command/${token}`, command);

        /*Chamada da função que encerra a conexão com o broker mqtt.*/
        return client.end();
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * ========================================================
     * |Função responsável por buscar todas as variáveis do   |
     * |projeto selecionado.                                  |
     * ========================================================
     */
    function listVariable (idProject) {
        /*Varificação se o idProject enviado é válido.*/
        if (isNaN(idProject) || idProject === 0) {
            return alert("Identificador do projeto inválido!")
        }

        /*Chamada axios para a rota listProjectVariables para buscar as variáveis do projeto selecionado.*/
        axios.post("/listVariable", {idProject: idProject})
        .then((response) => {
            /* Tratamento do retorno.*/
            if (response.status === 200 && response.data.status === "success") {
                /*Atribuição das variáveis enviadas.*/
                const variables = response.data.data;
                /*Variáveis de manipulação da lista de variáveis/*/
                const rowCards  = document.getElementById("rowCards");
                const rowCharts = document.getElementById("rowCharts");
                const rowTables = document.getElementById("rowTables");

                /*Variável auxiliar para guardar todos os charts que precisam ser criados.*/
                const auxCharts = [];

                /*Loop responsável por renderizar o modo de exibição de cada variável.*/
                variables.forEach(element => {
                    if (element.idExhibition === 1) {
                        rowCharts.innerHTML += templateChart(element, idProject);
                        auxCharts.push({name: element.variableName, id: `variable-${element.idVariable}`});
                    }
                    if (element.idExhibition === 2) {
                        rowTables.innerHTML += templateTable(element, idProject);
                    }
                    if (element.idExhibition === 3) {
                        rowCards.innerHTML += templateCard(element, idProject);
                    }
                });

                /*Loop responsável por renderizar as variáveis que utilizam gráfico.*/
                auxCharts.forEach(element => {
                    createChartTemp([], element.name, element.id);
                });
            }
        })
        .catch((error) => {
            /*Atribuição da mensagem de retorno do servidor.*/
            const errorMsg = error.response.data.msg;

            let msg = "";

            /*Verificação se foi enviada mais de uma mensagem.*/
            if(Array.isArray(errorMsg)) {
                /*Loop responsável por concatenar todas as mensagens enviadas.*/
                for (const i in errorMsg) {
                    msg += errorMsg[i].msg + "\n";
                }
            } else {
                msg = errorMsg
            }
            /*Alertar o usuario, caso tenha ocorrido algum erro no servidor*/
            alert(msg);
        });
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * ========================================================
     * |Função responsável por buscar todas as variáveis do   |
     * |projeto selecionado.                                  |
     * ========================================================
     */
    function listProjectMeasure () {

        const search = { 
            idProject: idProject,
            startDate: document.getElementById("startDate").value,
            endDate: document.getElementById("endDate").value
        };

        /*Varificação se o idProject é válido.*/
        if (search.idProject === undefined || search.idProject === null || isNaN(search.idProject) || search.idProject === 0) {
            return alert("Identificador do projeto inválido!");
        }

        /*Varificação se a data inicial é válida.*/
        if (search.startDate === undefined || search.startDate === null || search.startDate === "") {
            return alert("Data inicial inválida!");
        }

        /*Varificação se a data final é válida.*/
        if (search.endDate === undefined || search.endDate === null || search.endDate === "") {
            return alert("Data final inválida!");
        }

        if (new Date(search.startDate) > new Date(search.endDate)) {
            return alert("A data final deve ser maior ou igual a data inicial!");
        }

        /*Chamada axios para a rota listProjectMeasure para buscar as medidas do projeto selecionado.*/
        axios.post("/listProjectMeasure", search)
        .then((response) => {
            /* Tratamento do retorno.*/
            if (response.status === 200 && response.data.status === "success") {
                /*Atribuição das medidas enviadas.*/
                const measures = response.data.data;

                /*Variável auxiliar para guardar todos as medidas dos charts.*/
                const chartMeasures = {};

                /*Loop responsável por renderizar os dados nos seus respectivos modos de exibição.*/
                measures.forEach(element => {
                    /*Exibição como gráfico.*/
                    if (element.idExhibition === 1) {
                        if (Array.isArray(chartMeasures[`variable-${element.idVariable}/${element.variableName}`])) {
                            chartMeasures[`variable-${element.idVariable}/${element.variableName}`].push({date: new Date(element.dateTime), value: element.value});
                        } else {
                            chartMeasures[`variable-${element.idVariable}/${element.variableName}`] = [{date: new Date(element.dateTime), value: element.value}];
                        }
                    }
                    /*Exibição como tabela.*/
                    if (element.idExhibition === 2) {
                        document.getElementById(`variable-${element.idVariable}`).innerHTML += templateListMeasure(element);
                    }
                    /*Exibição como card.*/
                    if (element.idExhibition === 3) {
                        document.getElementById(`variable-${element.idVariable}`).innerHTML = element.value;
                    }
                });

                /*Atribuição de todas as chaves criadas para as medidas de gráficos.*/
                const chartKeys = Object.keys(chartMeasures);

                /*Loop responsável por renderizar as medidas que utilizam gráfico.*/
                chartKeys.forEach(element => {
                    const idVariable = element.split("/")[0];
                    const variableName = element.split("/")[1];
                    createChartTemp(chartMeasures[element], variableName, idVariable);
                });
            }
        })
        .catch((error) => {
            /*Atribuição da mensagem de retorno do servidor.*/
            const errorMsg = error.response.data.msg;

            let msg = "";

            /*Verificação se foi enviada mais de uma mensagem.*/
            if(Array.isArray(errorMsg)) {
                /*Loop responsável por concatenar todas as mensagens enviadas.*/
                for (const i in errorMsg) {
                    msg += errorMsg[i].msg + "\n";
                }
            } else {
                msg = errorMsg
            }
            /*Alertar o usuario, caso tenha ocorrido algum erro no servidor*/
            alert(msg);
        });
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por retornar um template html de  |
     * |um card para exibição de dados de uma variável.      |
     * =======================================================
     */
    function templateCard(variable, idProject) {
        return `
            <div class="col">
                <div class="card" style="width:200px; height:130px;">
                    <div class="card-body">
                        <h5 class="card-title text-secondary text-center">${variable.variableName}</h5>
                        <h2 id="variable-${variable.idVariable}" class="text-secondary text-center"></h2>
                    </div>
                </div>
            </div>
        `;
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por retornar um template html de  |
     * |um gráfico para exibição de dados de uma variável.   |
     * =======================================================
     */
    function templateChart(variable, idProject) {
        return `
            <div class="row">
                <div class="col-lg">
                    <div class="chartdiv" id="variable-${variable.idVariable}"></div>
                </div>
            </div>
            <br><br><br><br><br><br><br>
        `;
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por retornar um template html de  |
     * |uma tabela para exibição de dados de uma variável.   |
     * =======================================================
     */
    function templateTable(variable, idProject) {
        return `
            <div class="table col" style="height: 400px; min-width: 30%; overflow: scroll;">
                <h5 class="text-secondary" style="text-align: center;">${variable.variableName}</h5>
                <table class="table" id="variableTable">
                    <thead id="tableHeader">
                        <th>ID</th>
                        <th>Valor</th>
                        <th>Data/Hora</th>
                    </thead>
                    <tbody id="variable-${variable.idVariable}">
                    </tbody>
                </table>
            </div>
        `;
    }
/*============================================================================*/

/*============================================================================*/
    /**
     * =======================================================
     * |Função responsável por retornar um template html de  |
     * |um determinado item da tabela, correspondente a uma  |
     * |medida.                                              |
     * =======================================================
     */
    function templateListMeasure(measure) {
        const date = measure.dateTime.split("T")[0];
        const hour = measure.dateTime.split("T")[1].split(".")[0];
        return `
            <td>${measure.idVariable}</td>
            <td>${measure.value}</td>
            <td>${date} ${hour}</td>
        `;
    }
/*============================================================================*/

/*============================================================================*/
    function createChartTemp(measure, chartTitle, idDiv) {
        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end

        // Create chart instance
        let chart = am4core.create(idDiv, am4charts.XYChart);

        chart.data = measure;

        // Create axes
        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

        let title = chart.titles.create();
        title.text = chartTitle;
        title.fontSize = 20;
        title.marginBottom = 5;

        dateAxis.baseInterval = {
            timeUnit: "minute",
            count: 1
        };

        dateAxis.tooltipDateFormat = "HH:mm, d MMMM";

        // Create series
        let series = chart.series.push(new am4charts.LineSeries());
        series.dataFields.valueY = "value";
        series.dataFields.dateX = "date";
        series.tooltipText = "{value}"
        series.strokeWidth = 2;
        series.minBulletDistance = 15;

        // Drop-shaped tooltips
        series.tooltip.background.cornerRadius = 20;
        series.tooltip.background.strokeOpacity = 0;
        series.tooltip.pointerOrientation = "vertical";
        series.tooltip.label.minWidth = 40;
        series.tooltip.label.minHeight = 40;
        series.tooltip.label.textAlign = "middle";
        series.tooltip.label.textValign = "middle";

        // Make bullets grow on hover
        let bullet = series.bullets.push(new am4charts.CircleBullet());
        bullet.circle.strokeWidth = 2;
        bullet.circle.radius = 4;
        bullet.circle.fill = am4core.color("#fff");

        let bullethover = bullet.states.create("hover");
        bullethover.properties.scale = 1.3;

        //Make a panning cursor
        chart.cursor = new am4charts.XYCursor();
        chart.cursor.behavior = "panXY";
        chart.cursor.xAxis = dateAxis;
        chart.cursor.snapToSeries = series;

        // Create a horizontal scrollbar with previe and place it underneath the date axis
        chart.scrollbarX = new am4charts.XYChartScrollbar();
        chart.scrollbarX.series.push(series);
        // chart.scrollbarX.parent = chart.bottomAxesContainer;

        dateAxis.start = 0.79;
        dateAxis.keepSelection = true;
    }
/*============================================================================*/

</script>

</html>